// <auto-generated />
using System;
using ISC_ELIB_SERVER.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ISC_ELIB_SERVER.Migrations
{
    [DbContext(typeof(isc_dbContext))]
    [Migration("20250219183042_intialCreate")]
    partial class intialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.AcademicYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("academic_years", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("DateAwarded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_awarded");

                    b.Property<string>("File")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("file");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("achievement", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.AnswerImagesQa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("answer_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.ToTable("answer_images_qa", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.AnswersQa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("answers_qa", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Campus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("phone_number");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("UserId");

                    b.ToTable("campuses", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.ChangeClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("AttachmentName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("attachment_name");

                    b.Property<string>("AttachmentPath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("attachment_path");

                    b.Property<DateTime?>("ChangeClassDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("change_class_date");

                    b.Property<int?>("LeadershipId")
                        .HasColumnType("integer")
                        .HasColumnName("leadership_id");

                    b.Property<int?>("NewClassId")
                        .HasColumnType("integer")
                        .HasColumnName("new_class_id");

                    b.Property<int?>("OldClassId")
                        .HasColumnType("integer")
                        .HasColumnName("old_class_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<int?>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("student_id");

                    b.HasKey("Id");

                    b.HasIndex("NewClassId");

                    b.HasIndex("OldClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("change_class", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sent_at");

                    b.Property<int?>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicYearId")
                        .HasColumnType("integer")
                        .HasColumnName("academic_year_id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("ClassTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("class_type_id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<int?>("GradeLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("grade_level_id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int?>("StudentQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("student_quantity");

                    b.Property<int?>("SubjectQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("subject_quantity");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("ClassTypeId");

                    b.HasIndex("GradeLevelId");

                    b.HasIndex("UserId");

                    b.ToTable("classes", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.ClassType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("class_types", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<int?>("TopicId")
                        .HasColumnType("integer")
                        .HasColumnName("topic_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("discussions", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.DiscussionImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("DiscussionId")
                        .HasColumnType("integer")
                        .HasColumnName("discussion_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.ToTable("discussion_images", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.EducationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("education_levels", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.EntryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("entry_types", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicYearId")
                        .HasColumnType("integer")
                        .HasColumnName("academic_year_id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("ClassTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("class_type_id");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("duration_minutes");

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("exam_date");

                    b.Property<string>("File")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file");

                    b.Property<int?>("GradeLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("grade_level_id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("integer")
                        .HasColumnName("semester_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("ClassTypeId");

                    b.HasIndex("GradeLevelId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SubjectId");

                    b.ToTable("exams", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.ExamGrader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("ClassIds")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("class_ids");

                    b.Property<int?>("ExamId")
                        .HasColumnType("integer")
                        .HasColumnName("exam_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("UserId");

                    b.ToTable("exam_graders", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.ExamSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicYearId")
                        .HasColumnType("integer")
                        .HasColumnName("academic_year_id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ExamDay")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("exam_day");

                    b.Property<bool?>("Form")
                        .HasColumnType("boolean")
                        .HasColumnName("form");

                    b.Property<int?>("GradeLevelsId")
                        .HasColumnType("integer")
                        .HasColumnName("grade_levels_id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("integer")
                        .HasColumnName("semester_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<int?>("Subject")
                        .HasColumnType("integer")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("GradeLevelsId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("Subject");

                    b.ToTable("exam_schedule", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.ExamScheduleClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("class_id");

                    b.Property<int?>("ExampleSchedule")
                        .HasColumnType("integer")
                        .HasColumnName("example_schedule");

                    b.Property<int?>("SupervisoryTeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("supervisory_teacher_id");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ExampleSchedule");

                    b.HasIndex("SupervisoryTeacherId");

                    b.ToTable("exam_schedule_class", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Exemption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("class_id");

                    b.Property<string>("ExemptedObjects")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("exempted_objects");

                    b.Property<string>("FormExemption")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("form_exemption");

                    b.Property<int?>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("student_id");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("exemption", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.GradeLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("grade_levels", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Major", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("major", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<int?>("SenderId")
                        .HasColumnType("integer")
                        .HasColumnName("sender_id");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.QuestionImagesQa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("question_images_qa", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.QuestionQa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("question_qa", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Reserve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("class_id");

                    b.Property<string>("File")
                        .HasColumnType("text")
                        .HasColumnName("file");

                    b.Property<int?>("LeadershipId")
                        .HasColumnType("integer")
                        .HasColumnName("leadership_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<DateTime?>("ReserveDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reserve_date");

                    b.Property<string>("RetentionPeriod")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("retention_period");

                    b.Property<string>("Semester")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("semester");

                    b.Property<int?>("SemestersId")
                        .HasColumnType("integer")
                        .HasColumnName("semesters_id");

                    b.Property<int?>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("student_id");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("reserve", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Resignation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Attachment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("attachment");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<int?>("LeadershipId")
                        .HasColumnType("integer")
                        .HasColumnName("leadership_id");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("resignation", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Retirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Attachment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("attachment");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<int?>("LeadershipId")
                        .HasColumnType("integer")
                        .HasColumnName("leadership_id");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id");

                    b.ToTable("retirement", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_permission", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("district_id");

                    b.Property<int?>("EducationLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("education_level_id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EstablishedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("established_date");

                    b.Property<string>("Fax")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("fax");

                    b.Property<bool?>("HeadOffice")
                        .HasColumnType("boolean")
                        .HasColumnName("head_office");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("phone_number");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("integer")
                        .HasColumnName("province_id");

                    b.Property<string>("SchoolType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("school_type");

                    b.Property<string>("TrainingModel")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("training_model");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("WardId")
                        .HasColumnType("integer")
                        .HasColumnName("ward_id");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("website_url");

                    b.HasKey("Id");

                    b.HasIndex("EducationLevelId");

                    b.ToTable("schools", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.ScoreType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("QtyScoreSemester1")
                        .HasColumnType("integer")
                        .HasColumnName("qty_score_semester_1");

                    b.Property<int?>("QtyScoreSemester2")
                        .HasColumnType("integer")
                        .HasColumnName("qty_score_semester_2");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("score_types", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicYearId")
                        .HasColumnType("integer")
                        .HasColumnName("academic_year_id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.ToTable("semesters", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("AutoOpen")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_open");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<int?>("DurationTime")
                        .HasColumnType("integer")
                        .HasColumnName("duration_time");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<int?>("ExamId")
                        .HasColumnType("integer")
                        .HasColumnName("exam_id");

                    b.Property<bool?>("IsExam")
                        .HasColumnType("boolean")
                        .HasColumnName("is_exam");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.Property<string>("ShareCodeUrl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("share_code_url");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<int?>("TeachingAssignmentId")
                        .HasColumnType("integer")
                        .HasColumnName("teaching_assignment_id");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("TeachingAssignmentId");

                    b.ToTable("sessions", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.StudentInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("GuardianAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("guardian_address");

                    b.Property<DateTime?>("GuardianDob")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("guardian_dob");

                    b.Property<string>("GuardianJob")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("guardian_job");

                    b.Property<string>("GuardianName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("guardian_name");

                    b.Property<string>("GuardianPhone")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("guardian_phone");

                    b.Property<string>("GuardianRole")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("guardian_role");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("student_info", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.StudentScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.Property<int?>("ScoreTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("score_type_id");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("integer")
                        .HasColumnName("semester_id");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ScoreTypeId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("student_scores", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<int?>("HoursSemester1")
                        .HasColumnType("integer")
                        .HasColumnName("hours_semester_1");

                    b.Property<int?>("HoursSemester2")
                        .HasColumnType("integer")
                        .HasColumnName("hours_semester_2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int?>("SubjectGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_group_id");

                    b.Property<int?>("SubjectTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_type_id");

                    b.HasKey("Id");

                    b.HasIndex("SubjectGroupId");

                    b.HasIndex("SubjectTypeId");

                    b.ToTable("subjects", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.SubjectGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("subject_groups", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.SubjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("subject_types", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Support", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("supports", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("Captcha")
                        .HasColumnType("boolean")
                        .HasColumnName("captcha");

                    b.Property<int?>("ThemeId")
                        .HasColumnType("integer")
                        .HasColumnName("theme_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.HasIndex("UserId");

                    b.ToTable("system_settings", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TeacherFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<int>("DistrictCode")
                        .HasColumnType("integer")
                        .HasColumnName("district_code");

                    b.Property<string>("GuardianAddressDetail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("guardian_address_detail");

                    b.Property<string>("GuardianAddressFull")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("guardian_address_full");

                    b.Property<string>("GuardianName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("guardian_name");

                    b.Property<string>("GuardianPhone")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("guardian_phone");

                    b.Property<int>("ProvinceCode")
                        .HasColumnType("integer")
                        .HasColumnName("province_code");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id");

                    b.Property<int>("WardCode")
                        .HasColumnType("integer")
                        .HasColumnName("ward_code");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("teacher_family", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TeacherInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("AddressFull")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address_full");

                    b.Property<string>("Cccd")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("cccd");

                    b.Property<int?>("DistrictCode")
                        .HasColumnType("integer")
                        .HasColumnName("district_code");

                    b.Property<DateTime?>("IssuedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("issued_date");

                    b.Property<string>("IssuedPlace")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("issued_place");

                    b.Property<DateTime?>("PartyDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("party_date");

                    b.Property<bool?>("PartyMember")
                        .HasColumnType("boolean")
                        .HasColumnName("party_member");

                    b.Property<int?>("ProvinceCode")
                        .HasColumnType("integer")
                        .HasColumnName("province_code");

                    b.Property<DateTime?>("UnionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("union_date");

                    b.Property<bool?>("UnionMember")
                        .HasColumnType("boolean")
                        .HasColumnName("union_member");

                    b.Property<string>("UnionPlace")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("union_place");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("WardCode")
                        .HasColumnType("integer")
                        .HasColumnName("ward_code");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("teacher_info", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TeacherTrainingProgram", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer")
                        .HasColumnName("training_program_id");

                    b.HasKey("TeacherId", "TrainingProgramId")
                        .HasName("teacher_training_program_pkey");

                    b.ToTable("teacher_training_program", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TeachingAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("class_id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.Property<int?>("TopicsId")
                        .HasColumnType("integer")
                        .HasColumnName("topics_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TopicsId");

                    b.HasIndex("UserId");

                    b.ToTable("teaching_assignments", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TemporaryLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Attachment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("attachment");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<int?>("LeadershipId")
                        .HasColumnType("integer")
                        .HasColumnName("leadership_id");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("temporary_leave", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("ClassIds")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("class_ids");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<int?>("DurationTime")
                        .HasColumnType("integer")
                        .HasColumnName("duration_time");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<string>("File")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file");

                    b.Property<bool?>("FileSubmit")
                        .HasColumnType("boolean")
                        .HasColumnName("file_submit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("integer")
                        .HasColumnName("semester_id");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("tests", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TestAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("AnswerText")
                        .HasColumnType("text")
                        .HasColumnName("answer_text");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("test_answers", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TestFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<int?>("TestId")
                        .HasColumnType("integer")
                        .HasColumnName("test_id");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("test_file", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TestQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("QuestionText")
                        .HasColumnType("text")
                        .HasColumnName("question_text");

                    b.Property<string>("QuestionType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("question_type");

                    b.Property<int?>("TestId")
                        .HasColumnType("integer")
                        .HasColumnName("test_id");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("test_questions", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TestsAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<int?>("SubmissionId")
                        .HasColumnType("integer")
                        .HasColumnName("submission_id");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.ToTable("tests_attachment", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TestsSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("CorrectAnswers")
                        .HasColumnType("integer")
                        .HasColumnName("correct_answers");

                    b.Property<bool?>("Graded")
                        .HasColumnType("boolean")
                        .HasColumnName("graded");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.Property<int?>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("student_id");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("submitted_at");

                    b.Property<int?>("TestId")
                        .HasColumnType("integer")
                        .HasColumnName("test_id");

                    b.Property<int?>("TotalQuestion")
                        .HasColumnType("integer")
                        .HasColumnName("total_question");

                    b.Property<int?>("WrongAnswers")
                        .HasColumnType("integer")
                        .HasColumnName("wrong_answers");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestId");

                    b.ToTable("tests_submissions", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TestSubmissionsAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("AnswerText")
                        .HasColumnType("text")
                        .HasColumnName("answer_text");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<int?>("SelectedAnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("selected_answer_id");

                    b.Property<int?>("SubmissionId")
                        .HasColumnType("integer")
                        .HasColumnName("submission_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedAnswerId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("test_submissions_answers", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("themes", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("File")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("topics", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TopicsFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<int?>("TopicId")
                        .HasColumnType("integer")
                        .HasColumnName("topic_id");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("topics_file", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Degree")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("degree");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("FileName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("file_path");

                    b.Property<int?>("MajorId")
                        .HasColumnType("integer")
                        .HasColumnName("major_id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int?>("SchoolFacilitiesId")
                        .HasColumnType("integer")
                        .HasColumnName("school_facilities_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("TrainingForm")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("training_form");

                    b.HasKey("Id");

                    b.ToTable("training_programs", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TransferSchool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("AttachmentName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("attachment_name");

                    b.Property<string>("AttachmentPath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("attachment_path");

                    b.Property<int?>("LeadershipId")
                        .HasColumnType("integer")
                        .HasColumnName("leadership_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("SchoolAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("school_address");

                    b.Property<int?>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("student_id");

                    b.Property<DateTime?>("TransferSchoolDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("transfer_school_date");

                    b.Property<string>("TransferToSchool")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("transfer_to_school");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("transfer_school", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("types", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicYearId")
                        .HasColumnType("integer")
                        .HasColumnName("academic_year_id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("AddressFull")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address_full");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("class_id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<int?>("DistrictCode")
                        .HasColumnType("integer")
                        .HasColumnName("district_code");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("enrollment_date");

                    b.Property<int?>("EntryType")
                        .HasColumnType("integer")
                        .HasColumnName("entry_type");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<bool?>("Gender")
                        .HasColumnType("boolean")
                        .HasColumnName("gender");

                    b.Property<string>("Nation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nation");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PlaceBirth")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("place_birth");

                    b.Property<int?>("ProvinceCode")
                        .HasColumnType("integer")
                        .HasColumnName("province_code");

                    b.Property<string>("Religion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("religion");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("street");

                    b.Property<int?>("UserStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("user_status_id");

                    b.Property<int?>("WardCode")
                        .HasColumnType("integer")
                        .HasColumnName("ward_code");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("ClassId");

                    b.HasIndex("EntryType");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserStatusId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.UserStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("user_status", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.WorkProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool?>("IsCurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current");

                    b.Property<string>("Organization")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("organization");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("position");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int?>("SubjectGroupsId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_groups_id");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id");

                    b.ToTable("work_process", (string)null);
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.AcademicYear", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.School", "School")
                        .WithMany("AcademicYears")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("fk_academic_years_school_id");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Achievement", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.Type", "Type")
                        .WithMany("Achievements")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_achievement_type_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.User", "User")
                        .WithMany("Achievements")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_achievement_user_id");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.AnswerImagesQa", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.AnswersQa", "Answer")
                        .WithMany("AnswerImagesQas")
                        .HasForeignKey("AnswerId")
                        .HasConstraintName("fk_answer_images_qa_answer_id");

                    b.Navigation("Answer");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.AnswersQa", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.QuestionQa", "Question")
                        .WithMany("AnswersQas")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_answers_qa_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Campus", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.School", "School")
                        .WithMany("Campuses")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("fk_campuses_school_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.User", "User")
                        .WithMany("Campuses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_campuses_user_id");

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.ChangeClass", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.Class", "NewClass")
                        .WithMany("ChangeClassNewClasses")
                        .HasForeignKey("NewClassId")
                        .HasConstraintName("fk_change_class_new_class_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.Class", "OldClass")
                        .WithMany("ChangeClassOldClasses")
                        .HasForeignKey("OldClassId")
                        .HasConstraintName("fk_change_class_old_class_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.User", "Student")
                        .WithMany("ChangeClasses")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("fk_change_class_student_id");

                    b.Navigation("NewClass");

                    b.Navigation("OldClass");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Chat", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.Session", "Session")
                        .WithMany("Chats")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("fk_chats_session_id");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Class", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.AcademicYear", "AcademicYear")
                        .WithMany("Classes")
                        .HasForeignKey("AcademicYearId")
                        .HasConstraintName("fk_classes_academic_year_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.ClassType", "ClassType")
                        .WithMany("Classes")
                        .HasForeignKey("ClassTypeId")
                        .HasConstraintName("fk_classes_class_type_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.GradeLevel", "GradeLevel")
                        .WithMany("Classes")
                        .HasForeignKey("GradeLevelId")
                        .HasConstraintName("fk_classes_grade_level_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.User", "User")
                        .WithMany("Classes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_classes_user_id");

                    b.Navigation("AcademicYear");

                    b.Navigation("ClassType");

                    b.Navigation("GradeLevel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Discussion", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.Topic", "Topic")
                        .WithMany("Discussions")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("fk_discussions_topic_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.User", "User")
                        .WithMany("Discussions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_discussions_user_id");

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.DiscussionImage", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.Discussion", "Discussion")
                        .WithMany("DiscussionImages")
                        .HasForeignKey("DiscussionId")
                        .HasConstraintName("fk_discussion_images_discussion_id");

                    b.Navigation("Discussion");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Exam", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.AcademicYear", "AcademicYear")
                        .WithMany("Exams")
                        .HasForeignKey("AcademicYearId")
                        .HasConstraintName("fk_exams_academic_year_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.ClassType", "ClassType")
                        .WithMany("Exams")
                        .HasForeignKey("ClassTypeId")
                        .HasConstraintName("fk_exams_class_type_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.GradeLevel", "GradeLevel")
                        .WithMany("Exams")
                        .HasForeignKey("GradeLevelId")
                        .HasConstraintName("fk_exams_grade_level_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.Semester", "Semester")
                        .WithMany("Exams")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("fk_exams_semester_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_exams_subject_id");

                    b.Navigation("AcademicYear");

                    b.Navigation("ClassType");

                    b.Navigation("GradeLevel");

                    b.Navigation("Semester");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.ExamGrader", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.Exam", "Exam")
                        .WithMany("ExamGraders")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_exam_graders_exam_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.User", "User")
                        .WithMany("ExamGraders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_exam_graders_user_id");

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.ExamSchedule", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.AcademicYear", "AcademicYear")
                        .WithMany("ExamSchedules")
                        .HasForeignKey("AcademicYearId")
                        .HasConstraintName("fk_exam_schedule_academic_year_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.GradeLevel", "GradeLevels")
                        .WithMany("ExamSchedules")
                        .HasForeignKey("GradeLevelsId")
                        .HasConstraintName("fk_exam_schedule_grade_levels_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.Semester", "Semester")
                        .WithMany("ExamSchedules")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("fk_exam_schedule_semester_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.Subject", "SubjectNavigation")
                        .WithMany("ExamSchedules")
                        .HasForeignKey("Subject")
                        .HasConstraintName("fk_exam_schedule_subject");

                    b.Navigation("AcademicYear");

                    b.Navigation("GradeLevels");

                    b.Navigation("Semester");

                    b.Navigation("SubjectNavigation");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.ExamScheduleClass", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.Class", "Class")
                        .WithMany("ExamScheduleClasses")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("fk_exam_schedule_class_class_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.ExamSchedule", "ExampleScheduleNavigation")
                        .WithMany("ExamScheduleClasses")
                        .HasForeignKey("ExampleSchedule")
                        .HasConstraintName("fk_exam_schedule_class_example_schedule");

                    b.HasOne("ISC_ELIB_SERVER.Models.TeacherInfo", "SupervisoryTeacher")
                        .WithMany("ExamScheduleClasses")
                        .HasForeignKey("SupervisoryTeacherId")
                        .HasConstraintName("fk_exam_schedule_class_supervisory_teacher_id");

                    b.Navigation("Class");

                    b.Navigation("ExampleScheduleNavigation");

                    b.Navigation("SupervisoryTeacher");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Exemption", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.Class", "Class")
                        .WithMany("Exemptions")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("fk_exemption_class_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.User", "Student")
                        .WithMany("Exemptions")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("fk_exemption_student_id");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.GradeLevel", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.TeacherInfo", "Teacher")
                        .WithMany("GradeLevels")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("fk_grade_levels_teacher_id");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Notification", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.User", "Sender")
                        .WithMany("NotificationSenders")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("fk_notifications_sender_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.User", "User")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_notifications_user_id");

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.QuestionImagesQa", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.QuestionQa", "Question")
                        .WithMany("QuestionImagesQas")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_question_images_qa_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.QuestionQa", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.Subject", "Subject")
                        .WithMany("QuestionQas")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_question_qa_subject_id");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Reserve", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.User", "Student")
                        .WithMany("Reserves")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("fk_reserve_student_id");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Resignation", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.TeacherInfo", "Teacher")
                        .WithMany("Resignations")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("fk_resignation_teacher_id");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.RolePermission", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("fk_role_permission_permission_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_permission_role_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.School", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.EducationLevel", "EducationLevel")
                        .WithMany("Schools")
                        .HasForeignKey("EducationLevelId")
                        .HasConstraintName("fk_schools_education_level_id");

                    b.Navigation("EducationLevel");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Semester", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.AcademicYear", "AcademicYear")
                        .WithMany("Semesters")
                        .HasForeignKey("AcademicYearId")
                        .HasConstraintName("fk_semesters_academic_year_id");

                    b.Navigation("AcademicYear");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Session", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.Exam", "Exam")
                        .WithMany("Sessions")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_sessions_exam_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.TeachingAssignment", "TeachingAssignment")
                        .WithMany("Sessions")
                        .HasForeignKey("TeachingAssignmentId")
                        .HasConstraintName("fk_sessions_teaching_assignment_id");

                    b.Navigation("Exam");

                    b.Navigation("TeachingAssignment");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.StudentInfo", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.User", "User")
                        .WithMany("StudentInfos")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_student_info_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.StudentScore", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.ScoreType", "ScoreType")
                        .WithMany("StudentScores")
                        .HasForeignKey("ScoreTypeId")
                        .HasConstraintName("fk_student_scores_score_type_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.Semester", "Semester")
                        .WithMany("StudentScores")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("fk_student_scores_semester_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.Subject", "Subject")
                        .WithMany("StudentScores")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_student_scores_subject_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.User", "User")
                        .WithMany("StudentScores")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_student_scores_user_id");

                    b.Navigation("ScoreType");

                    b.Navigation("Semester");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Subject", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.SubjectGroup", "SubjectGroup")
                        .WithMany("Subjects")
                        .HasForeignKey("SubjectGroupId")
                        .HasConstraintName("fk_subjects_subject_group_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.SubjectType", "SubjectType")
                        .WithMany("Subjects")
                        .HasForeignKey("SubjectTypeId")
                        .HasConstraintName("fk_subjects_subject_type_id");

                    b.Navigation("SubjectGroup");

                    b.Navigation("SubjectType");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.SubjectGroup", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.TeacherInfo", "Teacher")
                        .WithMany("SubjectGroups")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("fk_subject_groups_teacher_id");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Support", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.User", "User")
                        .WithMany("Supports")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_supports_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.SystemSetting", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.Theme", "Theme")
                        .WithMany("SystemSettings")
                        .HasForeignKey("ThemeId")
                        .HasConstraintName("fk_system_settings_theme_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.User", "User")
                        .WithMany("SystemSettings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_system_settings_user_id");

                    b.Navigation("Theme");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TeacherFamily", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.TeacherInfo", "Teacher")
                        .WithMany("TeacherFamilies")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_family_teacher_id");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TeacherInfo", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.User", "User")
                        .WithMany("TeacherInfos")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_teacher_info_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TeacherTrainingProgram", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.TeacherInfo", "Teacher")
                        .WithMany("TeacherTrainingPrograms")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("fk_teacher_training_program_teacher_info");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TeachingAssignment", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.Class", "Class")
                        .WithMany("TeachingAssignments")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("fk_teaching_assignments_class_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.Subject", "Subject")
                        .WithMany("TeachingAssignments")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_teaching_assignments_subject_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.Topic", "Topics")
                        .WithMany("TeachingAssignments")
                        .HasForeignKey("TopicsId")
                        .HasConstraintName("fk_teaching_assignments_topics_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.User", "User")
                        .WithMany("TeachingAssignments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_teaching_assignments_user_id");

                    b.Navigation("Class");

                    b.Navigation("Subject");

                    b.Navigation("Topics");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TemporaryLeave", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.TeacherInfo", "Teacher")
                        .WithMany("TemporaryLeaves")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("fk_temporary_leave_teacher_id");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Test", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.Subject", "Subject")
                        .WithMany("Tests")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_tests_subject_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.User", "User")
                        .WithMany("Tests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_tests_user_id");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TestAnswer", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.TestQuestion", "Question")
                        .WithMany("TestAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_test_answers_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TestFile", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.Test", "Test")
                        .WithMany("TestFiles")
                        .HasForeignKey("TestId")
                        .HasConstraintName("fk_test_file_test_id");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TestQuestion", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.Test", "Test")
                        .WithMany("TestQuestions")
                        .HasForeignKey("TestId")
                        .HasConstraintName("fk_test_questions_test_id");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TestsAttachment", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.TestsSubmission", "Submission")
                        .WithMany("TestsAttachments")
                        .HasForeignKey("SubmissionId")
                        .HasConstraintName("fk_tests_attachment_submission_id");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TestsSubmission", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.User", "Student")
                        .WithMany("TestsSubmissions")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("fk_tests_submissions_student_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.Test", "Test")
                        .WithMany("TestsSubmissions")
                        .HasForeignKey("TestId")
                        .HasConstraintName("fk_tests_submissions_test_id");

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TestSubmissionsAnswer", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.TestQuestion", "Question")
                        .WithMany("TestSubmissionsAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_test_submissions_answers_question_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.TestAnswer", "SelectedAnswer")
                        .WithMany("TestSubmissionsAnswers")
                        .HasForeignKey("SelectedAnswerId")
                        .HasConstraintName("fk_test_submissions_answers_selected_answer_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.TestsSubmission", "Submission")
                        .WithMany("TestSubmissionsAnswers")
                        .HasForeignKey("SubmissionId")
                        .HasConstraintName("fk_test_submissions_answers_submission_id");

                    b.Navigation("Question");

                    b.Navigation("SelectedAnswer");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TopicsFile", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.Topic", "Topic")
                        .WithMany("TopicsFiles")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("fk_topics_file_topic_id");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TransferSchool", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.User", "Student")
                        .WithMany("TransferSchools")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("fk_transfer_school_student_id");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.User", b =>
                {
                    b.HasOne("ISC_ELIB_SERVER.Models.AcademicYear", "AcademicYear")
                        .WithMany("Users")
                        .HasForeignKey("AcademicYearId")
                        .HasConstraintName("fk_users_academic_year_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.Class", "Class")
                        .WithMany("Users")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("fk_users_class_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.EntryType", "EntryTypeNavigation")
                        .WithMany("Users")
                        .HasForeignKey("EntryType")
                        .HasConstraintName("fk_users_entry_type");

                    b.HasOne("ISC_ELIB_SERVER.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_users_role_id");

                    b.HasOne("ISC_ELIB_SERVER.Models.UserStatus", "UserStatus")
                        .WithMany("Users")
                        .HasForeignKey("UserStatusId")
                        .HasConstraintName("fk_users_user_status_id");

                    b.Navigation("AcademicYear");

                    b.Navigation("Class");

                    b.Navigation("EntryTypeNavigation");

                    b.Navigation("Role");

                    b.Navigation("UserStatus");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.AcademicYear", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("ExamSchedules");

                    b.Navigation("Exams");

                    b.Navigation("Semesters");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.AnswersQa", b =>
                {
                    b.Navigation("AnswerImagesQas");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Class", b =>
                {
                    b.Navigation("ChangeClassNewClasses");

                    b.Navigation("ChangeClassOldClasses");

                    b.Navigation("ExamScheduleClasses");

                    b.Navigation("Exemptions");

                    b.Navigation("TeachingAssignments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.ClassType", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Discussion", b =>
                {
                    b.Navigation("DiscussionImages");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.EducationLevel", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.EntryType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Exam", b =>
                {
                    b.Navigation("ExamGraders");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.ExamSchedule", b =>
                {
                    b.Navigation("ExamScheduleClasses");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.GradeLevel", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("ExamSchedules");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.QuestionQa", b =>
                {
                    b.Navigation("AnswersQas");

                    b.Navigation("QuestionImagesQas");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.School", b =>
                {
                    b.Navigation("AcademicYears");

                    b.Navigation("Campuses");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.ScoreType", b =>
                {
                    b.Navigation("StudentScores");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Semester", b =>
                {
                    b.Navigation("ExamSchedules");

                    b.Navigation("Exams");

                    b.Navigation("StudentScores");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Session", b =>
                {
                    b.Navigation("Chats");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Subject", b =>
                {
                    b.Navigation("ExamSchedules");

                    b.Navigation("Exams");

                    b.Navigation("QuestionQas");

                    b.Navigation("StudentScores");

                    b.Navigation("TeachingAssignments");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.SubjectGroup", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.SubjectType", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TeacherInfo", b =>
                {
                    b.Navigation("ExamScheduleClasses");

                    b.Navigation("GradeLevels");

                    b.Navigation("Resignations");

                    b.Navigation("SubjectGroups");

                    b.Navigation("TeacherFamilies");

                    b.Navigation("TeacherTrainingPrograms");

                    b.Navigation("TemporaryLeaves");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TeachingAssignment", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Test", b =>
                {
                    b.Navigation("TestFiles");

                    b.Navigation("TestQuestions");

                    b.Navigation("TestsSubmissions");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TestAnswer", b =>
                {
                    b.Navigation("TestSubmissionsAnswers");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TestQuestion", b =>
                {
                    b.Navigation("TestAnswers");

                    b.Navigation("TestSubmissionsAnswers");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.TestsSubmission", b =>
                {
                    b.Navigation("TestSubmissionsAnswers");

                    b.Navigation("TestsAttachments");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Theme", b =>
                {
                    b.Navigation("SystemSettings");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Topic", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("TeachingAssignments");

                    b.Navigation("TopicsFiles");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.Type", b =>
                {
                    b.Navigation("Achievements");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.User", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("Campuses");

                    b.Navigation("ChangeClasses");

                    b.Navigation("Classes");

                    b.Navigation("Discussions");

                    b.Navigation("ExamGraders");

                    b.Navigation("Exemptions");

                    b.Navigation("NotificationSenders");

                    b.Navigation("NotificationUsers");

                    b.Navigation("Reserves");

                    b.Navigation("StudentInfos");

                    b.Navigation("StudentScores");

                    b.Navigation("Supports");

                    b.Navigation("SystemSettings");

                    b.Navigation("TeacherInfos");

                    b.Navigation("TeachingAssignments");

                    b.Navigation("Tests");

                    b.Navigation("TestsSubmissions");

                    b.Navigation("TransferSchools");
                });

            modelBuilder.Entity("ISC_ELIB_SERVER.Models.UserStatus", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
